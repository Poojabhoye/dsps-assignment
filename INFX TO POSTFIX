#include<iostream>
#include<stack>
#include<string>
using namespace std;
int precedence(char op){
if(op=='+'||op=='-')
{
return 1;
}
else if (op=='+'||op=='/')
{
return 2;
}
else if(op=='^')
{
return 3;
}
return 0;
}
bool isOperator(char c){
return(c=='+'||c=='-'||c=='/'||c=='^');}
string infixToPostfix(stringinfix){
stack<char>s;
string postfix ="";
for|(int i=0;i<infix.length();i++)
{
char c= infix[i];
if(isalnum(c)){
postix+=c;
}
else if(c=='('){
s.push(c);
}
else if (c==')'){
while(!s.empty()&& s.top()!='('){
postfix +=s.top();
s.pop();
}
else if(is operator (c))
{
while(!s.empt()&&precedence(s.top()>=precedence(c))}
postfix+=s.top();
s.push();
}
s.push(c);
}
while(!s.empty()){
postfix+=s.top();
s.pop();
return postfix;
}
int main(){
string infix;
cout<<"Enter an infix expression:";
cin>>infix;
string postfix=infix to postfix(infix);
cout<<"postfix expression:"<<postfix<<endl;
return 0;
}
